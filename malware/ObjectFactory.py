# -*- coding: utf-8 -*-

import os
import json
import importlib

class Factory:
    
    experimentsBaseFolder = None
    samplesTrainDescriptor = None
    samplesTrainRepository = None
                
    cleanerClass = None
    tokenizerClass = None
    modelerClass = None

    def __init__(self, profile):
        profilesDescriptor = "resource/profiles.json"
        if os.path.exists(profilesDescriptor):
            jsonData = open(profilesDescriptor)
            profilesData = json.load(jsonData)
            
            self.experimentsBaseFolder = profilesData[profile]['experiments.base.folder']
            self.samplesTrainDescriptor = profilesData[profile]['samples.train.descriptor']
            self.samplesTrainRepository = profilesData[profile]['samples.train.repository']
            
            self.cleanerClass = profilesData[profile]['engines']['cleaner']
            self.tokenizerClass = profilesData[profile]['engines']['tokenizer']
            self.modelerClass = profilesData[profile]['engines']['modeler']
            
            jsonData.close()

    def buildObject(self, fullQualifiedClassName):
        
        obj = None
        
        if fullQualifiedClassName != None and fullQualifiedClassName != '':
            packageName = '.'.join((fullQualifiedClassName.split('.'))[:-1])
            className = (fullQualifiedClassName.split('.'))[-1]
            
            if not packageName == "":
                module = importlib.import_module(packageName)
                my_class = getattr(module, className)
                obj = my_class()
            
        return obj
        
    def getCleaner(self):
        return self.buildObject(self.cleanerClass)
    
    def getTokenizer(self):
        return self.buildObject(self.tokenizerClass)
    
    def getModeler(self):
        return self.buildObject(self.modelerClass)