# -*- coding: utf-8 -*-

import csv
import random
import os
import os.path
import shutil

# Reads from CSV file. Returns a structure with All the samples
def readCSV(fileFullPath):
    
    """
    Output structure:
        {
            'total': N,
            'categories': {
                '1': {
                    'total': M,
                    'samples': ["jQyRwClgJHiOnr5IZ4cF", "j5q9Z8uCLzcFGHpA7l4x", ... "JwzA3tXdgc7eNYxjCy5L"]
                },
                '2': {
                    'total': M,
                    'samples': ["cYb4XuNSqOA9IFLHseG1", ... "7cyYPthi5KmvXEs2NkRj"]
                },
                ...
            },
            'inverse' : {
                '3RrCi87ovZ1Qw6WuygGB': '1'
            }
        }
    """

    samplesStruct = {'total': 0, 'categories': {}, 'inverse':{}}
    
    csvfile = open(fileFullPath, 'rb')
    samples = csv.reader(csvfile, delimiter=',')
    for row in samples:
        
        sampleName = row[0]
        sampleCategory = row[1]
        
        samplesStruct['total'] += 1
        
        if not sampleCategory == 'Class': # Skip first line
        
            if not sampleCategory in samplesStruct['categories']:
                samplesStruct['categories'][sampleCategory] = {'total':0, 'samples': []}

            samplesStruct['categories'][sampleCategory]['total'] += 1
            samplesStruct['categories'][sampleCategory]['samples'].append(sampleName)
            
            # Inverse reference for faster access
            samplesStruct['inverse'][sampleName] = sampleCategory
        
    return samplesStruct

# Split a list into 2 pieces. The "split" parameter sets the pieces sizes (default 75%-25%)
def splitList(a_list, split=0.75):
    half = int(round(len(a_list)*split))

    if half == len(a_list): half -= 1
    return a_list[:half], a_list[half:]

# Gets both "train" and "test" samples sets.
#   "samplesFileDescriptor" file path samples descriptor (CSV)
#   "totalSamples" is the total size of the desired samples.
#   "trainPercent" is the samples distribution
def getSamples(samplesFileDescriptor, totalSamples, trainPercent, seed):
    
    subSamplesStruct = {
        'train':{'categorized': {}, 'all': []}, 
        'test':{'categorized': {}, 'all': []}, 
        'inverse': [], 
        'bygroup': {'test': {}, 'train':{}}
    }
    
    samplesStruct = readCSV(samplesFileDescriptor)
    totalGlobalSamples = len(samplesStruct['inverse'])
    
    random.seed(seed)
    totalRandomSamples = []
    
    # Categories iteration
    for category in range(1,10):
        
        # Select the samples for this category
        categorySamples = samplesStruct['categories'][str(category)]
        population = categorySamples['total']
        
        #bucketSize = totalSamples/9 # Each category size. Uniform selection
        bucketWeight = float(population)/totalGlobalSamples
        bucketSize = totalSamples*bucketWeight # Each category size. Weighted selection
        
        # In case there are very few samples
        if population <= bucketSize:
            bucketSize = population

        # Choose "bucketSize" number of random samples from the category
        randomSamples = random.sample(categorySamples['samples'], int(bucketSize))
     
        """
        # Split into "train" and "test"
        trainSamples, testSamples = splitList(randomSamples, float(trainPercent)/100)
        if len(trainSamples)==0:
            trainSamples = testSamples

        subSamplesStruct['train']['categorized'][str(category)] = trainSamples
        subSamplesStruct['train']['all'].extend(trainSamples)
        
        subSamplesStruct['test']['categorized'][str(category)] = testSamples
        subSamplesStruct['test']['all'].extend(testSamples)
        """
        
    #subSamplesStruct['all']
    subSamplesStruct['inverse'] = samplesStruct['inverse']
    
    return subSamplesStruct
    
    
def getAllSamples(samplesFileDescriptor):
    
    subSamplesStruct = {
        'train':{'categorized': {}, 'all': []}, 
        'test':{'categorized': {}, 'all': []},
        'all': {'categorized': []}, 
        'inverse': [], 
        'bygroup': {'test': {}, 'train':{}}
    }
    
    samplesStruct = readCSV(samplesFileDescriptor)
        
    subSamplesStruct['all'] = samplesStruct['inverse']
    subSamplesStruct['inverse'] = samplesStruct['inverse']
    
    return subSamplesStruct
    
def buildWorkArea(sourceFolder, targetFolder, samplesFileDescriptor, totalSamples, trainPercent, seed):

    samples = []
    
    if not os.path.exists(targetFolder):
        os.mkdir(targetFolder)
    
    filelist = [ f for f in os.listdir(targetFolder) ]
    for f in filelist:
        filePath = targetFolder + "/" + f
        os.remove(filePath)

    if os.path.exists(samplesFileDescriptor):
        samples = getSamples(samplesFileDescriptor, totalSamples, trainPercent, seed)

        if os.path.exists(sourceFolder):
                    
            for category in samples['train']:
                categorySamples = samples['train'][category]
                for sample in categorySamples:
                    sourceFilePath = sourceFolder + "/" + sample + ".asm"
                    targetFilePath = targetFolder + "/" + sample + ".asm"
                    shutil.copyfile(sourceFilePath, targetFilePath)
    
            for category in samples['test']:
                categorySamples = samples['test'][category]
                for sample in categorySamples:
                    sourceFilePath = sourceFolder + "/" + sample + ".asm"
                    targetFilePath = targetFolder + "/" + sample + ".asm"
                    shutil.copyfile(sourceFilePath, targetFilePath)
                    


