# -*- coding: utf-8 -*-

import os
import os.path
import shutil
import json
import time
import numpy

import ObjectFactory
import SamplesManager

class Lab:
    
    experimentsBaseFolder = None
    samplesTrainDescriptor = None
    samplesTrainRepository = None
    factory = None
    
    def __init__(self, profile):
        self.factory = ObjectFactory.Factory(profile)
        
        self.experimentsBaseFolder = self.factory.experimentsBaseFolder
        self.samplesTrainDescriptor = self.factory.samplesTrainDescriptor
        self.samplesTrainRepository = self.factory.samplesTrainRepository
        
    def getCleaner(self):
        return self.factory.getCleaner()
    
    def getTokenizer(self):
        return self.factory.getTokenizer()
    
    def getModeler(self):
        return self.factory.getModeler()

class Experiment:
    
    assemblyCleaner = None
    assemblyTokenizer = None
    bagOfWord = None
    samples = None

    experimentsFolderName = None
    
    tstamp = None
    
    lab = None
    cleaner = None
    tokenizer = None
    modeler = None
    
    log = []
    
    def __init__(self, lab, samplesNumber=None, trainPercent=None, seed=None):
        self.lab = lab
        self.samplesNumber = samplesNumber
        self.trainPercent = trainPercent
        self.seed = seed
        
        self.log.append({"module":"Constructor", "step": "INIT", "tstamp": time.time()})
        
        if (samplesNumber == None or trainPercent == None or seed==None):
            self.samplesNumber = ''
            self.trainPercent = ''
            self.seed = str(time.time())
            mysamples = SamplesManager.getAllSamples(self.lab.samplesTrainDescriptor)
        else:            
            mysamples = SamplesManager.getSamples(
                    self.lab.samplesTrainDescriptor,
                    self.samplesNumber,
                    self.trainPercent,
                    self.seed
                )
            
        self.samples = mysamples
        self.tstamp = time.time()
        self.experimentsFolderName = self.getExperimentsFolderName()
        
        self.log.append({"module":"Constructor", "step": "END", "tstamp": time.time()})

    def getExperimentsFolderName(self):
        return self.seed + "_" + str(self.samplesNumber) + "_" + str(self.trainPercent)
    
    def buildWorkspace(self):
        
        self.log.append({"module":"buildWorkspace", "step": "INIT", "tstamp": time.time()})
        
        experimentFolder = self.lab.experimentsBaseFolder + "/" + self.experimentsFolderName
        #rawSamplesFolder = experimentFolder + "/raw-samples" 

        if not os.path.exists(self.lab.experimentsBaseFolder):
            os.mkdir(self.lab.experimentsBaseFolder)
        
        if os.path.exists(experimentFolder):
            shutil.rmtree(experimentFolder, True)
            os.rmdir(experimentFolder)
        
        os.mkdir(experimentFolder)
        
        """
        os.mkdir(rawSamplesFolder)
        os.mkdir(rawSamplesFolder + "/train")
        os.mkdir(rawSamplesFolder + "/test")

        if os.path.exists(self.lab.samplesTrainDescriptor):

            if os.path.exists(self.lab.samplesTrainRepository):
                        
                for category in self.samples['train']['categorized']:
                    categorySamples = self.samples['train']['categorized'][category]
                    for sample in categorySamples:
                        
                        sourceFilePathAsm = self.lab.samplesTrainRepository + "/" + sample + ".asm"
                        targetFilePathAsm = rawSamplesFolder + "/train/" + sample + ".asm"

                        sourceFilePathBytes = self.lab.samplesTrainRepository + "/" + sample + ".bytes"
                        targetFilePathBytes = rawSamplesFolder + "/train/" + sample + ".bytes"
                        
                        shutil.copyfile(sourceFilePathAsm, targetFilePathAsm)
                        #shutil.copyfile(sourceFilePathBytes, targetFilePathBytes)
        
                for category in self.samples['test']['categorized']:
                    categorySamples = self.samples['test']['categorized'][category]
                    for sample in categorySamples:
                        
                        sourceFilePathAsm = self.lab.samplesTrainRepository + "/" + sample + ".asm"
                        targetFilePathAsm = rawSamplesFolder + "/test/" + sample + ".asm"

                        sourceFilePathBytes = self.lab.samplesTrainRepository + "/" + sample + ".bytes"
                        targetFilePathBytes = rawSamplesFolder + "/test/" + sample + ".bytes"
                        
                        shutil.copyfile(sourceFilePathAsm, targetFilePathAsm)
                        #shutil.copyfile(sourceFilePathBytes, targetFilePathBytes)
            """
            
        self.log.append({"module":"buildWorkspace", "step": "END", "tstamp": time.time()})

    def cleanSamples(self):
        
        self.log.append({"module":"cleanSamples", "step": "INIT", "tstamp": time.time()})

        inputFolder, outputFolder = self.buildDirs("raw-samples", "clean-samples")   
        
        #trainSamplesList = self.samples['train']['all']
        #testSamplesList = self.samples['test']['all']
        allSamplesList = self.samples['all']

        #self.cleanAllSamplesInFolder(trainInputFolder, trainOutputFolder, trainSamplesList)
        #self.cleanAllSamplesInFolder(testInputFolder, testOutputFolder, testSamplesList)
        self.cleanAllSamplesInFolder(inputFolder, outputFolder, allSamplesList)

        self.log.append({"module":"cleanSamples", "step": "END", "tstamp": time.time()})
        
    def cleanAllSamplesInFolder(self, inputFilesFolder, outputFilesFolder, samplesNamesList):
        
        if self.cleaner != None:
            
            for filename in samplesNamesList:
                
                cleanAssemblyLines = self.cleaner.clean_FromFile(self, inputFilesFolder, filename)
                if len(cleanAssemblyLines) > 0:
                    
                    cleanedFilenameFullPath = outputFilesFolder + "/" + filename        
                    cleanFile = open(cleanedFilenameFullPath, "w")
                    for cleanLine in cleanAssemblyLines:
                        
                        cleanFile.write(cleanLine)
                        cleanFile.write("\n")
                    
                    cleanFile.close() 

    def tokenizeSamples(self):
        
        self.log.append({"module":"tokenizeSamples", "step": "INIT", "tstamp": time.time()})

        inputFolder, outputFolder = self.buildDirs("clean-samples", "tokenized-samples")   
        
        #trainSamplesList = self.samples['train']['all']
        #testSamplesList = self.samples['test']['all']

        allSamplesList = self.samples['all']
        
        #self.tokenizeAllSamplesInFolder(trainInputFolder, trainOutputFolder, trainSamplesList)
        #self.tokenizeAllSamplesInFolder(testInputFolder, testOutputFolder, testSamplesList)
        self.tokenizeAllSamplesInFolder(inputFolder, outputFolder, allSamplesList)

        self.log.append({"module":"tokenizeSamples", "step": "END", "tstamp": time.time()})
        
    def tokenizeAllSamplesInFolder(self, inputFilesFolder, outputFilesFolder, samplesNamesList):

        if self.tokenizer != None:
            
            for filename in samplesNamesList:
                
                tokenizedAssemblyLines = self.tokenizer.tokenize_FromFile(self, inputFilesFolder, filename)
                
                if len(tokenizedAssemblyLines) > 0:
                    try:
                        jsonTokens = json.dumps(tokenizedAssemblyLines, encoding="utf-8", ensure_ascii=False)
                    
                        cleanedFilenameFullPath = outputFilesFolder + "/" + filename
                        
                        cleanFile = open(cleanedFilenameFullPath, "w")
                        cleanFile.write(jsonTokens)
                        cleanFile.close() 
                        
                    except Exception as inst:
                        print type(inst)
                        print inst.args
                        print inst
                        print filename

    def buildModel(self):
        
        self.log.append({"module":"buildModel", "step": "INIT", "tstamp": time.time()})
                
        #trainInputFolder, testInputFolder, trainOutputFolder, testOutputFolder = self.buildDirs("tokenized-samples", "models")
        inputFolder, outputFolder = self.buildDirs("tokenized-samples", "models")   
        
        #trainSamplesList = self.samples['train']['all']
        #testSamplesList = self.samples['test']['all']
        allSamplesList = self.samples['all']
        
        #self.buildModelsInFolder(trainInputFolder, trainOutputFolder, trainSamplesList)
        #self.buildModelsInFolder(testInputFolder, testOutputFolder, testSamplesList)
        self.buildModelsInFolder(inputFolder, outputFolder, allSamplesList)
        
        self.log.append({"module":"buildModel", "step": "END", "tstamp": time.time()})
        
    def buildModelsInFolder(self, inputFilesFolder, outputFilesFolder, samplesNamesList):

        if self.modeler != None:
            
            tokenizedAssembliesList = []
            
            mysamples = self.samples['all']
            totalSamples = len(mysamples)
            computedSamples = 0
            computedPercent = 0
            
            mytime = +time.time()
            print "> started at: " + str((time.time()-mytime))
            
            #for filename in rawFilesList:
            for filename in samplesNamesList:
                
                print filename
                #print "> buildStruct_FromFile: " + str((time.time()-mytime))
                
                assemblyStruct = self.modeler.buildStruct_FromFile(self, inputFilesFolder, filename)
                if (assemblyStruct != None):
                    tokenizedAssembliesList.append(assemblyStruct)
                    
                computedSamples += 1
                computedPercent = 100*(float(computedSamples)/totalSamples)
                print "> PERCENT: "+str(computedPercent)
                    
            if len(tokenizedAssembliesList) > 0:
                
                print "> build_DocTermMatrix: " + str((time.time()-mytime))
                docTermMatrix = self.modeler.build_DocTermMatrix(self, tokenizedAssembliesList);
                vocabulary, nDocTermMatrix = numpy.asarray(docTermMatrix)
                
                import pandas as pd
                
                df = pd.DataFrame(data=nDocTermMatrix, columns=vocabulary)
                
                df.to_csv(outputFilesFolder + "/doc_term_matrix.csv", sep=',')                
                
    def buildDirs(self, inputSubFolder, outputSubFolder):
        
        experimentFolder = self.lab.experimentsBaseFolder + "/" + self.experimentsFolderName

        inputFolder = experimentFolder + "/" + inputSubFolder
        outputFolder = experimentFolder + "/" + outputSubFolder
        
        if os.path.exists(outputFolder):
            shutil.rmtree(outputFolder, True)
        
        if not os.path.exists(outputFolder):
            os.mkdir(outputFolder)
        
        return (inputFolder, outputFolder)
    










