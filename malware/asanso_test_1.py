# -*- coding: utf-8 -*-

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

#pd.set_option('display.expand_max_repr', False)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', None)
pd.set_option('display.line_width', 200)


#df=pd.read_csv('datasets/asm_instructions_bagofwords_10000samples_70precent_train.csv', sep=',')
#df=pd.read_csv('datasets/code_segments_size_10000samples_70percent.csv', sep=',')
#df=pd.read_csv('C:/datamandanga/git/malware/work/malware/datasets/code_segments_size_10000samples_70percent.csv', sep=',')
df=pd.read_csv('datasets/definitive/train/segments_relative_size_10868samples.csv')

ds = df.values

samplesNames = df['sample_id'].values
#print np.shape(samplesNames)

X = ds[:,2:-1] # all samples
y = ds[:,-1] # Labels

print '----------------------------------------------------------'
print ds[2,2:-1]
print '----------------------------------------------------------'
print ds[:,-1]
print '----------------------------------------------------------'


perm = np.random.permutation(y.size)
#print perm
PRC = 0.8
split_point = int(np.ceil(y.shape[0]*PRC))

X_train = X[perm[:split_point].ravel(),:]
y_train = y[perm[:split_point].ravel()]
y_train = y_train[:].astype(int)

X_test = X[perm[split_point:].ravel(),:]
y_test = y[perm[split_point:].ravel()]
y_test = y_test[:].astype(int)

#print X_train.shape, X_test.shape, y_train.shape, y_test.shape
#print '-------------------------------------------'
#print np.shape(X_train)
#print np.shape(y_train)

random_state = 123
n_jobs = 1
verbose = 2
clf = RandomForestClassifier(n_estimators=00, random_state=random_state, n_jobs=n_jobs, verbose = verbose)


# Start training
#print('training started')
clf.fit(X_train, y_train)
#print('training completed')


#Check on the training set and visualize performance
yhat=clf.predict(X_train)

print "\nTRAINING STATS:"
print "classification accuracy:", metrics.accuracy_score(yhat, y_train)

plt.imshow(metrics.confusion_matrix(y_train, yhat), cmap=plt.cm.binary, interpolation='nearest')
print metrics.confusion_matrix(y_train,yhat)
plt.xlabel('Training confusion matrix')
plt.colorbar()

#Check on the test set and visualize performance
yhat=clf.predict(X_test)
pp = clf.predict_proba(X_test)
print str(pp)
print "TESTING STATS:"
print "classification accuracy:", metrics.accuracy_score(yhat, y_test)
print metrics.confusion_matrix(yhat, y_test)

plt.figure()
plt.imshow(metrics.confusion_matrix(y_test, yhat), cmap=plt.cm.binary, interpolation='nearest')
plt.xlabel('Testing confusion matrix')
plt.colorbar()

