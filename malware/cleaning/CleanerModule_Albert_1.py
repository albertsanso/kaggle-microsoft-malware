# -*- coding: utf-8 -*-

import re
import os
import os.path

class CleanerInstructionOneLoop:
       
    def __init__(self):
        pass
           
    def clean_FromFile(self, experiment, folder, filename):
        
        folder = experiment.lab.samplesTrainRepository
        filePath = folder + "/" + filename + ".asm"
        
        cleanAssemblyLines = []
    
        if os.path.exists(filePath):
            inputLines = open(filePath).readlines()
            
            # First filtering task - Remove left side junk and full-line comments
            cleanAssemblyLines = self.clean_FromLinesArray(inputLines)
    
        return cleanAssemblyLines
        

    def clean_FromLinesArray(self, linesArray):
        
        cleanAssemblyLines = []
    
        # Main regexp
        textSectionFirstFilterPattern = re.compile(
            "^(\.text|\.icode):([0-9a-zA-Z]{8,8})"
            "("
              "(\s[0-9a-zA-Z]{2,2}[\+]{0,1})+(\t+)(\s*)"
              "("
                "(?!\s*;)(.*)"
              ")"
            ")"
        )
        
        # Inline comments regexp
        innerCommentsFilterPattern = re.compile(
            "(.*)(;.*)"
        )
        
        for line in linesArray:
            match1 = textSectionFirstFilterPattern.search(line)
            if match1:
                filteredLine = match1.group(7)
                
                # Removes some more junk
                if not filteredLine.startswith("CC CC") and not filteredLine.startswith("00 00"):
                    
                    # Removes the Inline comments
                    match2 = innerCommentsFilterPattern.search(filteredLine)
                    if match2:
                        # Keep only the first match corresponding to the left side of the code line.
                        # The right side of the line is the comments substring
                        filteredLine2 = match2.group(1)
                        
                        if not filteredLine2.startswith("db "):
                            cleanAssemblyLines.append(filteredLine2)
                    else:
                        # The match is failed, so the line has no inline comments
                        if not filteredLine.startswith("db "):
                            cleanAssemblyLines.append(filteredLine)
                            
        return cleanAssemblyLines
        
class CleanerInstructionTwoLoop:
    
    # Performes the filtering in two steps. Each step in a different loop.
    # The algorith is more clear but slower.
    def clean_FromFile(self, experiment, folder, filename):
        
        filePath = folder + "/" + filename + ".asm"
        
        textSectionLines = []
        cleanAssemblyLines = []
    
        # Main regexp
        textSectionFirstFilterPattern = re.compile(
            "^(\.text|\.icode):([0-9a-zA-Z]{8,8})"
            "("
              "(\s[0-9a-zA-Z]{2,2}[\+]{0,1})+(\t+)(\s*)"
              "("
                "(?!\s*;)(.*)"
              ")"
            ")"
        )
        
        # Inline comments regexp
        innerCommentsFilterPattern = re.compile(
            "(.*)(;.*)"
        )
        
        if os.path.exists(filePath):
            inputLines = open(filePath).readlines()
            
            # First filtering task - Remove left side junk and full-line comments
            for line in inputLines:
                match = textSectionFirstFilterPattern.search(line)
                if match:
                    filteredLine = match.group(7)
                    
                    # Removes some more junk
                    if not filteredLine.startswith("CC CC") and not filteredLine.startswith("00 00"):
                        textSectionLines.append(filteredLine)
        
            # Second filtering task - 
            for line in textSectionLines:
                
                # Removes the Inline comments
                match = innerCommentsFilterPattern.search(line)
                if match:
                    # Keep only the first match corresponding to the left side of the code line.
                    # The right side of the line is the comments substring
                    filteredLine = match.group(1)
                    if not filteredLine.startswith("db "):
                        cleanAssemblyLines.append(filteredLine)
                else:
                    # The match is failed, so the line has no inline comments
                    if not line.startswith("db "):
                        cleanAssemblyLines.append(line)
    
        return cleanAssemblyLines;

