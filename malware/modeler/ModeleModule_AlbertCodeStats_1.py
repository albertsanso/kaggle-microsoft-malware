# -*- coding: utf-8 -*-

import re
from collections import Counter
import os
import os.path

class AbstractCodeStatsModeler:
    
    def __init__(self):
        pass
    
    def simpleNormalizeBag(self, bag):
        normalizedBag = []
        
        if len(bag) > 0:
            labels, values = zip(*bag)
            totalSum = float(sum(values))
            
            for tpl in bag:
                occurrences = tpl[1]
                normalizedOccurrences = occurrences/totalSum
                normalizedTuple = (tpl[0], normalizedOccurrences)
                normalizedBag.append(normalizedTuple)
            
        return normalizedBag
        
    def buildLexicon(self, corpus):
        lexicon = set()
        for doc in corpus:
            if 'bag_of_words' in doc:
                bagOfWords = doc['bag_of_words']
                if bagOfWords != None:
                    wordsList = list(bagOfWords)
                    for word in wordsList:
                        lexicon.update([word[0]])
                
        return lexicon
        
    def termFrequency(self, term, document):
      return self.freq(term, document)
    
    def freq(self, term, document):
        if document != None:
            for myTuple in document:
                if myTuple[0] == term:
                    return myTuple[1]
        return 0
        
    def build_DocTermMatrix(self, experiment, docsStructList):
        matrix = []
        vocabulary = self.buildLexicon(docsStructList)
        #matrix.append(list(vocabulary))
        
        #experiment.samples        
        
        for struct in docsStructList:
            doc = struct['bag_of_words']
            tf_vector = [self.termFrequency(word, doc) for word in vocabulary]
            
            sampleId = struct['sample_id']
            tf_vector.insert(0, sampleId)
            tf_vector.append(experiment.samples['inverse'][sampleId])
            matrix.append(tf_vector)

        vocabulary = list(vocabulary)
        vocabulary.insert(0, 'sample_id')
        vocabulary.append('category')
        
        return (vocabulary, matrix)
        
    def buildStruct_FromFile(self, experiment, inputFilesFolder, filename):
        raise NotImplementedError("Please Implement this method")


class CodeStatsModeler(AbstractCodeStatsModeler):
    
    def __init__(self):
        pass

    def buildStruct_FromFile(self, experiment, folder, filename):
        
        #folder = experiment.lab.experimentsBaseFolder + "/" + experiment.getExperimentsFolderName() + "/raw-samples/train"
        folder = experiment.lab.samplesTrainRepository
        filePath = folder + "/" + filename + '.asm'
        
        #lab.samplesTrainDescriptor
        #lab.samplesTrainRepository
        
        struct = self.getSectionsStats_FromFile(filePath, filename)
        
        return struct
    
    def getSectionsStats_FromFile(self, filepath, filename):
        
        if os.path.exists(filepath):
            with open(filepath) as infile:
                inputLines = infile.readlines()
            
            #inputLines = open(filepath).readlines()
            #print "> "+filepath
                return self.getSectionsStats_FromArray(inputLines, filename)
        else:
            return None
        
        
    def getSectionsStats_FromArray(self, fileAsmLines, filename):
        
        bag = Counter()
        
        expr1 = re.compile(
            "^\.(\w+):(.*)"
        )
        
        for line in fileAsmLines:
            match1 = expr1.search(line)
            if match1:
                section = match1.group(1)
                bag[section] += 1
        
        #print bag.items()
        sectionsDistribution = self.simpleNormalizeBag(bag.items())
        assemblyStruct = {}
        assemblyStruct['filename'] = filename
        assemblyStruct['bag_of_words'] = sectionsDistribution
        assemblyStruct['sample_id'] = filename
        
        return assemblyStruct
    
