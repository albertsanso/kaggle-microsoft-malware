# -*- coding: utf-8 -*-

import re
import os
import os.path

class Tokenizer1:
    
    def __init__(self):
        pass
    
    # Tokenize from file full path
    def tokenize_FromFile(self, experiment, folder, filename):
        
        filePath = folder + "/" + filename
        
        tokenStruct = {}
        
        if os.path.exists(filePath):
            inputLines = open(filePath).readlines()
            tokenStruct = self.tokenize_FromArray(inputLines)
        
        return tokenStruct
    
    # Tokenize from text lines
    def tokenize_FromArray(self, inputLinesArray):
        
        tokenizedAssembly = []
        
        for line in inputLinesArray:
            tokenizedLine = self.tokenizeAssemblyLine(line)
            if tokenizedLine != None:
                tokenizedAssembly.append(tokenizedLine)
            
        return tokenizedAssembly
    
    # Tokenize 1 clean assembly code line
    def tokenizeAssemblyLine(self, assemblyLine):
        
        """
        Output structure:
            {
                'type': '',
                'name': '',
                'operands': ['', '', ... '']
            }
        """
        
        tokenStruct = None
        
        # Labels regexp
        labelPattern = re.compile(
            "^(\w+:)"
        )
        
        # Regular instrucion regexp
        instructionPattern = re.compile(
            "^(\w+)\s*(.*)"
        )
    
        # Search for Labels
        match1 = labelPattern.search(assemblyLine)
        if match1:
            labelName = match1.group(1)
            
            # Remove last ":" symbol label
            if labelName.endswith(":"): labelName = labelName[0:-1]

            tokenStruct = {}
            tokenStruct['type'] = 'LABEL'
            tokenStruct['name'] = labelName
        else:
            
            # Search for instructions
            match2 = instructionPattern.search(assemblyLine)
            if match2:
                instruction = match2.group(1)
                operands = match2.group(2)
                operands = [x.strip() for x in operands.split(',')] # THIS IS PYTHONICCCC !!!!!

                tokenStruct = {}
                tokenStruct['type'] = 'INSTRUCTION'
                tokenStruct['name'] = instruction
                tokenStruct['operands'] = operands
        
        return tokenStruct