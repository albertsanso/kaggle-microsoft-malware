# -*- coding: utf-8 -*-

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

pd.set_option('display.max_columns', 50)
pd.set_option('display.width', None)
pd.set_option('display.line_width', 200)

dftr = pd.read_csv('datasets/definitive/train/segments_relative_size_10868samples_union.csv')
dfts = pd.read_csv('datasets/definitive/test/segments_relative_size_10868samples_union.csv')

dstr = dftr.values
dsts = dfts.values

samplesNames = dftr['sample_id'].values
#print np.shape(samplesNames)

train_X = dstr[:,3:-1]
print train_X
train_y = dstr[:,-1]
print train_y
train_y = train_y[:].astype(int)

test_X = dsts[:,3:-1]
print test_X
test_y = dsts[:,-1]
print test_y
test_y = test_y[:].astype(int)



random_state = 123
n_jobs = -1
verbose = 2
clf = RandomForestClassifier(n_estimators=100, random_state=random_state, n_jobs=n_jobs, verbose = verbose)

# Start training
#print('training started')
clf.fit(train_X, train_y)
#print('training completed')

#Check on the training set and visualize performance
yhat=clf.predict(train_X)


print "\nTRAINING STATS:"
print "classification accuracy:", metrics.accuracy_score(yhat, train_y)
"""
plt.imshow(metrics.confusion_matrix(train_y, yhat), cmap=plt.cm.binary, interpolation='nearest')
print metrics.confusion_matrix(train_y,yhat)
plt.xlabel('Training confusion matrix')
plt.colorbar()
"""
#Check on the test set and visualize performance
yhat=clf.predict(test_X)
print "TESTING STATS:"
print "classification accuracy:", metrics.accuracy_score(yhat, test_y)

np.set_printoptions(threshold=500)
pp = clf.predict_proba(test_X)
#print str(np.shape(pp))
#print pp[0:20]

#### sum epsilon to probability matrix
pp = pp+0.000095
print pp

df1 = pd.DataFrame(data=pp, columns=['Prediction1','Prediction2','Prediction3','Prediction4','Prediction5','Prediction6','Prediction7','Prediction8','Prediction9'])
print df1



#df = dfts[dfts.]
samplesIdColumnsSerie = dfts.ix[:,0]
finalDf = pd.concat([samplesIdColumnsSerie, df1], axis=1)
finalDf.rename(columns = {'sample_id':'id'}, inplace=True)
finalDf.to_csv('datasets/definitive/trial/segments_size/union_eps_0.000095.csv', index=False)






#print metrics.confusion_matrix(yhat, test_y)
"""
plt.figure()
plt.imshow(metrics.confusion_matrix(test_y, yhat), cmap=plt.cm.binary, interpolation='nearest')
plt.xlabel('Testing confusion matrix')
plt.colorbar()
"""